name: "SCP through SSH"
inputs:
    # Server info
    host:
        required: true
    user:
        required: true
    port:
        required: true
        default: 22
    ssh_key_text:
        description: "SSH private key text"
        required: true
    # Proxy server info
    proxy_host:
        required: false
    proxy_user:
        required: false
    proxy_port:
        required: false
        default: 22
    proxy_ssh_key_text:
        required: false

    direction:
        description: "download/upload"
        required: true
        default: "download"
    local_file:
        required: true
    server_file:
        required: true
    include_file_name:
        default: "no"
        required: true
        description: "Does server file path include file name at the end or just the folder path (yes | no)"

runs:
    using: "composite"
    steps:
        - name: "Download backup file"
          shell: bash
          run: |
              function create_private_keyfile_from_content() {
                  content="$1"
                  key_file_path="$2"
                  mkdir -p $(dirname $key_file_path)
                  touch $key_file_path && chmod 600 $key_file_path
                  >$key_file_path
                  echo "$content" >>$key_file_path
              }

              function update_ssh_config() {
                  if [[ "${{inputs.proxy_host}}" != "" ]]; then
                      return
                  fi
                  mkdir -p ~/.ssh
                  touch ~/.ssh/config
                  echo > ~/.ssh/config
                  cat << EOF > ~/.ssh/config
                  Host server
                      HostName ${{inputs.host}}
                      User ${{inputs.user}}
                      Port ${{inputs.port}}
                      StrictHostKeyChecking no
                      ServerAliveInterval 60
                      IdentityFile $server_key_file
              EOF
                  chmod 600 ~/.ssh/config
              }

              function update_ssh_config_with_proxy() {
                  if [[ "${{inputs.proxy_host}}" == "" ]]; then
                      return
                  fi
                  mkdir -p ~/.ssh
                  touch ~/.ssh/config
                  echo > ~/.ssh/config
                  cat << EOF > ~/.ssh/config
                  Host proxy_server
                      HostName ${{inputs.proxy_host}}
                      User ${{inputs.proxy_user}}
                      Port ${{inputs.proxy_port}}
                      StrictHostKeyChecking no
                      ServerAliveInterval 60
                      IdentityFile $proxy_server_key_file

                  Host server
                      HostName ${{inputs.host}}
                      User ${{inputs.user}}
                      Port ${{inputs.port}}
                      StrictHostKeyChecking no
                      ServerAliveInterval 60
                      IdentityFile $server_key_file
                      ProxyJump proxy_server
              EOF
                  chmod 600 ~/.ssh/config
              }

              server_key_file=${{ github.workspace }}/$(date +%s)_key
              proxy_server_key_file=${{ github.workspace }}/$(date +%s)_proxy_key
              create_private_keyfile_from_content "${{inputs.ssh_key_text}}" "$server_key_file"
              create_private_keyfile_from_content "${{inputs.proxy_ssh_key_text}}" "$proxy_server_key_file"
              update_ssh_config
              update_ssh_config_with_proxy

              if [[ ${{ inputs.direction }} == "download" ]]; then
                  scp server:${{ inputs.server_file }} ${{ inputs.local_file }}
              else
                  file_path=${{ inputs.server_file }}
                  include_file_name=${{ inputs.include_file_name }}
                  if [ $include_file_name == "yes" ]; then
                      folder_path=$(dirname "$file_path")
                  else
                      folder_path=$file_path
                  fi

                  ssh server "
                      if [ ! -d "$folder_path" ]; then
                          mkdir -p $folder_path
                      fi
                  "

                  scp ${{ inputs.local_file }} server:${{ inputs.server_file }}
              fi
