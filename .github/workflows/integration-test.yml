name: Test Integration

on:
  workflow_dispatch:

env:
  # Các biến môi trường cố định cho test
  SERVER_HOST: 192.168.98.123
  SERVER_USER: gh-runner
  SERVER_SSH_PORT: 22
  SERVER_DEPLOY_PATH: /opt/odoo
  SERVER_ODOO_URL: http://192.168.98.123:8069
  SERVER_ODOO_DB_NAME: odoo
  SERVER_DB_PASSWORD: odoo
  ODOO_IMAGE_TAG: 13

  # Các biến cần thiết cho workflows
  LOCAL_BACKUP_FILE_PATH: ${{github.workspace}}/odoo.zip
  SERVER_TEMPORARY_BACKUP_PATH: /tmp/odoo/backup/bep/main
  SERVER_LATEST_BACKUP_FILE_PATH: /tmp/odoo/backup/bep/main/*.zip
  SERVER_CICD_SCRIPT_FOLDER: /tmp/odoo/cicd/bep/main
  CICD_SCRIPTS_PATH: ${{github.workspace}}/.github/scripts
  CICD_UTILS_SCRIPTS_PATH: ${{github.workspace}}/.github/scripts/utils.sh
  ODOO_CONFIG_FILE: ${{github.workspace}}/.github/odoo/etc/odoo.conf

jobs:
  prepare-backup:
    name: Prepare backup
    runs-on: ubuntu-latest
    outputs:
      server_latest_backup_file_path: ${{ steps.update-server-backup-path.outputs.server_latest_backup_file_path }}
      check_run_id: ${{ steps.create-check-run.outputs.check-run-id }}
    steps:
      - uses: actions/checkout@v4

      - name: Test Preparation
        uses: ./.github/actions/prepare-test-data

      - name: Make decision to create a new backup on server
        run: |
          echo "NEED_NEW_SERVER_BACKUP_FILE=1" >> $GITHUB_ENV

      - name: Upload backup script file to server
        uses: ./.github/actions/scp-ssh
        with:
          direction: "upload"
          host: ${{env.SERVER_HOST}}
          port: ${{env.SERVER_SSH_PORT}}
          user: ${{env.SERVER_USER}}
          ssh_key_text: ${{ secrets.SERVER_PRIVATE_KEY }}
          local_file: ${{ env.CICD_SCRIPTS_PATH }}/server-backup.sh
          server_file: ${{ env.SERVER_CICD_SCRIPT_FOLDER }}

      - name: Backup Odoo on server
        uses: ./.github/actions/ssh-script
        id: backup-on-server
        with:
          host: ${{env.SERVER_HOST}}
          port: ${{env.SERVER_SSH_PORT}}
          user: ${{env.SERVER_USER}}
          ssh_key_text: ${{ secrets.SERVER_PRIVATE_KEY }}
          set-output: 1
          script: |
            bash ${{ env.SERVER_CICD_SCRIPT_FOLDER }}/server-backup.sh "${{env.SERVER_DEPLOY_PATH}}" "${{env.SERVER_ODOO_DB_NAME}}" "${{env.SERVER_DB_PASSWORD}}" "${{env.ODOO_IMAGE_TAG}}" 1 "${{env.SERVER_TEMPORARY_BACKUP_PATH}}"

      - name: Get latest backup file path
        id: get_backup_path
        run: |
          latest_file=$(ssh -o StrictHostKeyChecking=no -p ${{env.SERVER_SSH_PORT}} -i <(echo "${{ secrets.SERVER_PRIVATE_KEY }}") ${{env.SERVER_USER}}@${{env.SERVER_HOST}} "ls ${{ env.SERVER_BACKUP_PATH }} | grep -E '${{env.SERVER_ODOO_DB_NAME}}_[0-9]{4}-[0-9]{2}-[0-9]{2}_[0-9]{2}-[0-9]{2}-[0-9]{2}\.zip' | sort -r | head -n 1")
          if [[ -n "$latest_file" ]]; then
            echo "::set-output name=server_backup_file::${{ env.SERVER_BACKUP_PATH }}/$latest_file"
          else
            echo "::set-output name=server_backup_file::${{ env.SERVER_LATEST_BACKUP_FILE_PATH }}"
          fi

      - name: Get backup file size on server
        id: get_size
        run: |
          backup_file="${{ steps.get_backup_path.outputs.server_backup_file }}"
          size=$(ssh -o StrictHostKeyChecking=no -p ${{env.SERVER_SSH_PORT}} -i <(echo "${{ secrets.SERVER_PRIVATE_KEY }}") ${{env.SERVER_USER}}@${{env.SERVER_HOST}} "stat -c %s '$backup_file'")
          size_gb=$(echo "$size/1024/1024/1024" | bc -l)
          if (( $(echo "$size_gb > 10" | bc -l) )); then
            echo "use_self_hosted=true" >> $GITHUB_OUTPUT
          else
            echo "use_self_hosted=false" >> $GITHUB_OUTPUT
          fi

  integration-test:
    name: Integration test
    needs: prepare-backup
    runs-on: ${{ needs.prepare-backup.outputs.use_self_hosted == 'true' && 'self-hosted' || 'ubuntu-latest' }}
    permissions:
      checks: write
      contents: read
    env:
      SERVER_LATEST_BACKUP_FILE_PATH: ${{ needs.prepare-backup.outputs.server_latest_backup_file_path }}
    steps:
      - uses: actions/checkout@v4

      - name: Download backup file
        uses: ./.github/actions/scp-ssh
        with:
          direction: "download"
          host: ${{env.SERVER_HOST}}
          port: ${{env.SERVER_SSH_PORT}}
          user: ${{env.SERVER_USER}}
          ssh_key_text: ${{ secrets.SERVER_PRIVATE_KEY }}
          local_file: ${{ env.LOCAL_BACKUP_FILE_PATH }}
          server_file: ${{ env.SERVER_LATEST_BACKUP_FILE_PATH }}
          include_file_name: "yes"

      - name: Run Integration test
        id: run_integration_test
        run: |
          bash ${{env.CICD_SCRIPTS_PATH}}/run-integration-test.sh "${{env.LOCAL_BACKUP_FILE_PATH}}" "test_commit" "false"
